from flx.model import api

DEFAULT_HTML = '''<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title></title>
    </head>
    <body>
        <p>&#160;</p>
    </body>
</html>
'''

artifactIDs = [ 120465, 211633, 1085203, 1108731, 1118291, 1230574, 1236522, 1476573, 1600826, 1618910, 1674567, 1711912, 1755726, 1778333, 1936875, 1977894, 2019207, 2033705, 2083971, 2097075, 2117984, 2119365, 2163310, 2323671, 2324674, 2415029, 2421407, 2443418, 2448226, 2487144, 2529352, 2540564, 2546163, 2556645, 2568655, 2570156, 2573024, 2585665, 2586951, 2591596, 2601815, 2604815, 2607104, 2620881, 2624249, 2625916, 2629264, 2645589, 2654280, 2654634, 2673329, 2677297, 2677417, 2683536, 2683712, 2694627, 2702410, 2712920, 2752452, 2754614, 2791045, 2825882, 2838403, 2845396, 2867206, 2868710, 2876669, 2882127, 2882792, 2891955, 2928253, 2940012, 2943138, 2946146, 2955402, 2958645, 2979852, 2980195, 2986262, 2987330, 2990690, 2991606, 2991668, 2992308, 2992440, 2995872, 2997920, 3000391, 3002386, 3006007, 3007849, 3013922, 3014706, 3015016, 3015199, 3015645, 3033439, 3034066, 3034844, 3035717, 3035897, 3036055, 3036590, 3038834, 3038838, 3039178, 3039342, 3040121, 3043573, 3045936, 3049136, 3052455, 3056393, 3058806, 3059568, 3061471, 3063395, 3065385, 3070045, 3070750, 3072349, 3072369, 3072370, 3074699, 3074730, 3077448, 3079979, 3081339, 3081439, 3082436, 3085728, 3086108, 3086110, 3086246, 3086270, 3087347, 3090639, 3093411, 3093421, 3094199, 3094349, 3094444, 3095483, 3096230, 3096975, 3097138, 3097159, 3097314, 3097432, 3098228, 3098231, 3098272, 3098287, 3098295, 3098320, 3098322, 3098384, 3098404, 3098482, 3098489, 3098496, 3098503, 3098531, 3098595, 3098604, 3098698, 3098740, 3098825, 3098866, 3098903, 3098909, 3098953, 3098970, 3098981, 3099104, 3099124, 3099141, 3099198, 3099220, 3099305, 3099427, 3099469, 3099476, 3099480, 3099502, 3099504, 3099506, 3099518, 3099526, 3099535, 3099537, 3099553, 3099565, 3099567, 3099591, 3099593, 3099604, 3099624, 3099626, 3099646, 3099879, 3099886, 3099889, 3099898, 3099940, 3099993, 3100002, 3100005, 3100010, 3100025, 3100043, 3100046, 3100052, 3100116, 3100139, 3100156, 3100158, 3100160, 3100162, 3100164, 3100189, 3100195, 3100199, 3100201, 3100212, 3100216, 3100218, 3100227, 3100235, 3100238, 3100249, 3100251, 3100253, 3100256, 3100258, 3100259, 3100267, 3100272, 3100274, 3100278, 3100328, 3100333, 3100339, 3100424, 3100464, 3100506, 3100614, 3100616, 3100618, 3100647, 3100736, 3100850, 3100853, 3100932, 3100951, 3101054, 3101070, 3101087, 3101091, 3101095, 3101098, 3101103, 3101107, 3101111, 3101114, 3101141, 3101148, 3101180, 3101222, 3101228, 3101231, 3101235, 3101264, 3101276, 3101277, 3101297, 3101300, 3101310, 3101328, 3101335, 3101338, 3101345, 3101347, 3101353, 3101363, 3101367, 3101371, 3101377, 3101383, 3101389, 3101402, 3101407, 3101420, 3101431, 3101452, 3101500, 3101502, 3101508, 3101520, 3101523, 3101547, 3101553, 3101566, 3101658, 3101659, 3101698, 3101810, 3101824, 3101939, 3102010, 3102110, 3102190, 3102195, 3102207, 3102212, 3102259, 3102274, 3102277, 3102426, 3102477, 3102501, 3102541, 3102625, 3102650, 3102656, 3102697, 3102731, 3102760, 3102802, 3102808, 3102835, 3102864, 3102893, 3102953, 3103137, 3103138, 3103143, 3103145, 3103149, 3103167, 3103177, 3103178, 3103194, 3103270, 3103282, 3103304, 3103314, 3103350, 3103367, 3103371, 3103388, 3103393, 3103481, 3103492, 3103514, 3103532, 3103598, 3103600, 3103604, 3103608, 3103661, 3103693, 3103709, 3103725, 3103739, 3103787, 3103821, 3103857, 3103876, 3103936, 3103977, 3103986, 3104005, 3104064, 3104094, 3104097, 3104127, 3104161, 3104185, 3104232, 3104299, 3104300, 3104303, 3104321, 3104359, 3104362, 3104367, 3104442, 3104447, 3104592, 3104652, 3104656, 3104724, 3104745, 3104791, 3104792, 3104796, 3104803, 3104878, 3104933, 3104956, 3105006, 3105014, 3105057, 3105067, 3105090, 3105124, 3105189, 3105234, 3105253, 3105289, 3105327, 3105331, 3105333, 3105336, 3105340, 3105344, 3105445, 3105565, 3105569, 3105571, 3105588, 3105595, 3105630, 3105631, 3105648, 3105650, 3105670, 3105690, 3105704, 3105769, 3105814, 3105868, 3105894, 3105905, 3105907, 3105920, 3105921, 3105922, 3105923, 3105950, 3105972, 3105975, 3105979, 3105999, 3106006, 3106073, 3106104, 3106106, 3106115, 3106155, 3106156, 3106233, 3106257, 3106268, 3106354, 3106375, 3106432, 3106500, 3106509, 3106538, 3106543, 3106549, 3106562, 3106572, 3106578, 3106584, 3106599, 3106604, 3106609, 3106613, 3106672, 3106674, 3106687, 3106730, 3106833, 3107122, 3107264, 3107447, 3107462, 3107475, 3107508, 3107575, 3107581, 3107620, 3107669, 3107696, 3107740, 3107767, 3107856, 3107886, 3108002, 3108126, 3108140, 3108141, 3108240, 3108246, 3108271, 3108309, 3108320, 3108415, 3108605, 3108711, 3108794, 3108836, 3108841, 3108927, 3108950, 3108951, 3108954, 3108997, 3109059, 3109075, 3109082, 3109106, 3109166, 3109181, 3109204, 3109210, 3109230, 3109340, 3109366, 3109369, 3109382, 3109396, 3109399, 3109400, 3109403, 3109409, 3109416, 3109430, 3109437, 3109441, 3109443, 3109449, 3109453, 3109455, 3109463, 3109474, 3109514, 3109529, 3109636, 3109641, 3109766, 3109815, 3109928, 3109947, 3109970, 3109998, 3110115, 3110135, 3110170, 3110193, 3110265, 3110352, 3110416, 3110425, 3110426, 3110437, 3110446, 3110456, 3110467, 3110507, 3110521, 3110557, 3110609, 3110617, 3110640, 3110647, 3110665, 3110668, 3110707, 3110719, 3110742, 3110856, 3110888, 3110911, 3110936, 3110937, 3110993, 3111018, 3111020, 3111022, 3111023, 3111073, 3111139, 3111140 ]

artifactIDs = [3003914, 3004022, 3101412, 3104389, 3106435, 2259868, 2498020, 3104388, 3104655, 3105574, 3106510, 3108169]

#artifactIDs = [3101091, 3101095, 3101098, 3101103, 3101107, 3101111, 3101114,

affected = []
def run():
    for id in artifactIDs:
        a = api.getArtifactByID(id=id)
        xhtml = a.getXhtml()
        if xhtml:
            numRevisions = len(a.revisions)
            print "=============================="
            print "Processing artifact: %d" % id
            print "[%d]: [%s], revisions[%d], creator[%d]" % (id, xhtml, numRevisions, a.creatorID)

            if numRevisions > 1:
                proceed = None
                proceed = raw_input("See previous revisions? [(y)es/(n)o] ")
                if proceed.startswith('y'):
                    affected.append(a.id)
                    for idx in range(1, numRevisions):
                        print "Revision [%d/%d]: [%s]" % (idx, numRevisions, a.revisions[idx].getXhtml())
                        use_this = None
                        use_this = raw_input("Use this revision or skip? [(u)se/(n)ext/(s)kip] ")
                        if use_this.startswith('s'):
                            break
                        elif use_this.startswith('u'):
                            goodXhtml = a.revisions[idx].getXhtml()
                            idx2 = idx - 1
                            while idx2 >= 0:
                                print "Fixing revision [%d] [idx:%d] for artifact [%d]" % (a.revisions[idx2].id, idx2, a.id)
                                a, ar = api.replaceRevisionContent(id=a.revisions[idx2].id, xhtml=goodXhtml)
                                idx2 -= 1
                            print "Done fixing"
                            break
                        elif idx == (numRevisions-1):
                            use_default = raw_input("No more revisions. Use default xhtml? [(y)es/(n)o] ")
                            if use_default.startswith('y'):
                                idx2 = idx
                                while idx2 >= 0:
                                    print "Fixing revision [%d] [idx:%d] for artifact [%d]" % (a.revisions[idx2].id, idx2, a.id)
                                    a, ar = api.replaceRevisionContent(id=a.revisions[idx2].id, xhtml=DEFAULT_HTML)
                                    idx2 -= 1
                                print "Done fixing"
                                break
            else:
                use_default = raw_input("Only one revision. Use default xhtml? [(y)es/(n)o] ")
                if use_default.startswith('y'):
                    print "Fixing revision [%d] for artifact [%d]" % (a.revisions[0].id, a.id)
                    a, ar = api.replaceRevisionContent(id=a.revisions[0].id, xhtml=DEFAULT_HTML)
                    print "Done fixing"
 

    print len(affected)
    print affected

