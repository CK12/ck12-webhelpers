#!/bin/bash -e
# ============================================
#  celeryd - Starts the Celery worker daemon.
# ============================================
#
# :Usage: /etc/init.d/celeryd-iss {start|stop|force-reload|restart|try-restart|status}
#
# :Configuration file: /etc/default/celeryd-iss
#
# To configure celeryd you probably need to tell it where to chdir.
#
# EXAMPLE CONFIGURATION
# =====================
#
# this is an example configuration for a Python project:
#
# /etc/default/celeryd:
#
#   # Where to chdir at start.
#   CELERYD_CHDIR="/opt/Myproject/"
#
#   # Extra arguments to celeryd
#   CELERYD_OPTS="--time-limit 300"
#
#   # Name of the celery config module.#
#   CELERY_CONFIG_MODULE="celeryconfig"
#
# EXAMPLE DJANGO CONFIGURATION
# ============================
#
#   # Where the Django project is.
#   CELERYD_CHDIR="/opt/Project/"
#
#   # Name of the projects settings module.
#   DJANGO_SETTINGS_MODULE="settings"
#
#   # Path to celeryd
#   CELERYD="/opt/Project/manage.py celeryd"
#
# AVAILABLE OPTIONS
# =================
#
#   * CELERYD_OPTS
#       Additional arguments to celeryd, see `celeryd --help` for a list.
#
#   * CELERYD_CHDIR
#       Path to chdir at start. Default is to stay in the current directory.
#
#   * CELERYD_PID_FILE
#       Full path to the pidfile. Default is /var/run/celeryd.pid.
#
#   * CELERYD_LOG_FILE
#       Full path to the celeryd logfile. Default is /var/log/celeryd.log
#
#   * CELERYD_LOG_LEVEL
#       Log level to use for celeryd. Default is INFO.
#
#   * CELERYD
#       Path to the celeryd program. Default is `celeryd`.
#       You can point this to an virtualenv, or even use manage.py for django.
#
#   * CELERYD_USER
#       User to run celeryd as. Default is current user.
#
#   * CELERYD_GROUP
#       Group to run celeryd as. Default is current user.


### BEGIN INIT INFO
# Provides:          celeryd
# Required-Start:    $network $local_fs $remote_fs
# Required-Stop:     $network $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: celery task worker daemon
### END INIT INFO

set -e

DEFAULT_CELERYD="/usr/local/bin/celeryd"
[ -f "/opt/env/iss/bin/celeryd" ] && DEFAULT_CELERYD="/opt/env/iss/bin/celeryd"

# /etc/init.d/ssh: start and stop the celery task worker daemon.

if test -f /etc/default/celeryd-iss; then
    . /etc/default/celeryd-iss
fi
export PYTHONPATH="${CELERYD_CHDIR}"

CELERYD_LOG_FILE=${CELERYD_LOG_FILE:-${CELERYD_LOGFILE:-"/var/log/celery/celeryd-iss-_n.log"}}
CELERYD_PID_FILE=${CELERYD_PID_FILE:-${CELERYD_PIDFILE:-"/var/run/celery/celeryd-iss-_n.pid"}}
CELERYD_LOG_LEVEL=${CELERYD_LOG_LEVEL:-${CELERYD_LOGLEVEL:-"INFO"}}
CELERYD_TESTMODE_FILE=${CELERYD_TESTMODE_FILE:-"/var/run/celery/celeryd-iss.test"}
CELERY_CONFIG_MODULE=${CELERY_CONFIG_MODULE:-"celeryconfig-iss"}

CELERYD=${CELERYD:-$DEFAULT_CELERYD}

export CELERY_LOADER CELERY_CONFIG_MODULE

. /lib/lsb/init-functions

CELERYD_OPTS="-f $CELERYD_LOG_FILE -l $CELERYD_LOG_LEVEL"

if [ -n "$2" ]; then
    CELERYD_OPTS="$CELERYD_OPTS $2"
fi

# Extra start-stop-daemon options, like user/group.
if [ -n "$CELERYD_USER" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --chuid $CELERYD_USER"
fi
if [ -n "$CELERYD_GROUP" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --group $CELERYD_GROUP"
fi

if [ -n "$CELERYD_CHDIR" ]; then
    DAEMON_OPTS="$DAEMON_OPTS --chdir $CELERYD_CHDIR"
fi

[ ! -d /var/run/celery ] && mkdir -p /var/run/celery
if [ -n "${CELERYD_USER}" ] && [ -n "${CELERYD_GROUP}" ]; then
    chown -R ${CELERYD_USER}:${CELERYD_GROUP} /var/run/celery
    chown -R ${CELERYD_USER}:${CELERYD_GROUP} /var/log/celery
fi

# Are we running from init?
run_by_init() {
    ([ "$previous" ] && [ "$runlevel" ]) || [ "$runlevel" = S ]
}


check_dev_null() {
    if [ ! -c /dev/null ]; then
    if [ "$1" = log_end_msg ]; then
        log_end_msg 1 || true
    fi
    if ! run_by_init; then
        log_action_msg "/dev/null is not a character device!"
    fi
    exit 1
    fi
}


export PATH="${PATH:+$PATH:}/usr/sbin:/sbin"


stop_workers () {
    local host="$(hostname)"
    cmd=""
    local i=1
    local ret=0
    while [ ${i} -le 10 ]; do
        opts_var="CELERYD_OPTS_GRP${i}"
        if [ -n "${!opts_var}" ]; then
            cmd="start-stop-daemon --stop \
                           --quiet \
                           $* \
                           --pidfile ${CELERYD_PID_FILE//_n/${i}}"
        else
            break
        fi
        let i=i+1

        $cmd
        [ $? -ne 0 ] && ret=1
        #echo "ret=$ret \n cmd=${cmd}"
    done

    log_end_msg $ret
}

start_workers () {

    local host="$(hostname)"
    local ret=0
    local i=1
    while [ ${i} -le 10 ]; do
        opts_var="CELERYD_OPTS_GRP${i}"
        if [ -n "${!opts_var}" ]; then
            cmd="start-stop-daemon --start $DAEMON_OPTS \
                           --quiet \
                           --oknodo \
                           --background \
                           --make-pidfile \
                           $* \
                           --pidfile ${CELERYD_PID_FILE//_n/${i}}
                           --exec $CELERYD -- ${!opts_var} ${CELERYD_OPTS//_n/${i}} -n celery-iss${i}.${host}"
        else
            break
        fi
        let i=i+1
        $cmd
        [ $? -ne 0 ] && ret=1
        #echo "ret=$ret \n cmd=${cmd}"
    done

    log_end_msg $ret
}



case "$1" in
  start)
    rm -f ${CELERYD_TESTMODE_FILE}
    check_dev_null
    log_daemon_msg "Starting celery task worker server" "celeryd-iss"
    start_workers
    ;;
  stop)
    rm -f ${CELERYD_TESTMODE_FILE}
    log_daemon_msg "Stopping celery task worker server" "celeryd-iss"
    stop_workers --oknodo
    ;;

  reload|force-reload)
    echo "Use start+stop"
    ;;

  restart)
    rm -f ${CELERYD_TESTMODE_FILE}
    log_daemon_msg "Restarting celery task worker server" "celeryd-iss"
    stop_workers --oknodo --retry 30
    check_dev_null log_end_msg
    start_workers
    ;;

  try-restart)
    log_daemon_msg "Restarting celery task worker server" "celeryd-iss"
    set +e
    stop_workers --retry 30
    RET="$?"
    set -e
    case $RET in
        0)
        # old daemon stopped
        check_dev_null log_end_msg
        start_workers
        ;;
        1)
        # daemon not running
        log_progress_msg "(not running)"
        log_end_msg 0
        ;;
        *)
        # failed to stop
        log_progress_msg "(failed to stop)"
        log_end_msg 1
        ;;
    esac
    ;;

  status)
    status_of_proc -p $CELERYD_PID_FILE $CELERYD celeryd-iss && exit 0 || exit $?
    ;;

  starttest)
    check_dev_null
    log_daemon_msg "Starting celery task worker server" "celeryd-iss"
    echo "1" > ${CELERYD_TESTMODE_FILE}
    start_workers
    ;;

  restarttest)
    stop_workers --oknodo --retry 30
    check_dev_null log_end_msg
    echo "1" > ${CELERYD_TESTMODE_FILE}
    start_workers
    ;;

  purge)
    ## Same as start
    rm -f ${CELERYD_TESTMODE_FILE}
    check_dev_null
    log_daemon_msg "Starting celery task worker server after purging old tasks" "celeryd-iss"
    CELERYD_OPTS="${CELERYD_OPTS} --purge"
    start_workers
    ;;

  *)
    log_action_msg "Usage: /etc/init.d/celeryd-iss {start|stop|force-reload|restart|try-restart|status|purge}"
    exit 1
esac

exit 0

