{"version":3,"sources":["schools-react.jsx"],"names":[],"mappings":"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","file":"schools-react.js","sourcesContent":["define( (require) => {\r\n    'use strict';\r\n    var React = require('react');\r\n    var ReactDOM = require('react-dom');\r\n\r\n    var Backbone = require('backbone');\r\n    var _ = require('underscore');\r\n    var $ = require('jquery');\r\n    var Utils = require('common/utils/utils');\r\n\r\n    var SchoolBanner = require('./components/schoolbanner');\r\n    var StateBanner = require('./components/statebanner');\r\n    var StateSelector = require('./components/stateselector');\r\n    var SchoolList = require('./components/schoollist');\r\n\r\n    var SchoolServices = require('schools/services/schools.services');\r\n\r\n    var DEFAULT_STATE = 'california';\r\n\r\n\r\n\r\n    var appData = {\r\n\r\n    };\r\n    var schoolRouter;\r\n\r\n\r\n    /**\r\n    Utility functions for fetching and manipulating states & schools data.\r\n    **/\r\n\r\n    //fetch states data from server\r\n    var fetchStates = SchoolServices.getStates().then( (data) => {\r\n        data = _(data).sortBy('_id').map((state) => {\r\n            return Object.assign(state, {\r\n                slug : Utils.slugify(state._id),\r\n                name : Utils.toTitleCase(state._id)\r\n            });\r\n        });\r\n        return data;\r\n    });\r\n\r\n    //find a state in states data by slug\r\n    var findState = (stateSlug) => {\r\n        var _d = $.Deferred(),\r\n            foundState = null;\r\n        fetchStates.done( (states) => {\r\n            foundState = states.find( (state) => {\r\n                return state.slug === stateSlug;\r\n            });\r\n            if (foundState){\r\n                _d.resolve(foundState);\r\n            } else {\r\n                _d.reject();\r\n            }\r\n        });\r\n        return _d.promise();\r\n    };\r\n\r\n     //retrieve user location using api\r\n    var fetchLocation = SchoolServices.getLocation();\r\n\r\n    //based on the retrieved location, fetch the local state\r\n    var fetchLocalRegion = $.when(fetchLocation).then( (location)=>{\r\n        var region = (location && location.region) || DEFAULT_STATE;\r\n        return findState(region);\r\n    });\r\n\r\n    //fetch schools for a state\r\n    var fetchSchoolsForState = (stateSlug) => {\r\n        var _d = $.Deferred(),schools;\r\n        findState(stateSlug)\r\n        .then((state) => {\r\n            SchoolServices.getSchoolsForState({\r\n                state:state._id\r\n            }).then( (data) => {\r\n                schools = data.school_artifacts.map( (school) => {\r\n                    var books = school.approved_books,\r\n                        id = books[0].schoolID,\r\n                        slug = Utils.slugify(school.school_name);\r\n                    return {\r\n                        name: school.school_name,\r\n                        books,\r\n                        id,\r\n                        slug,\r\n                        url: `/r-schools/${stateSlug}/${slug}-${id}`\r\n                    }\r\n                } )\r\n                _d.resolve(schools);\r\n            }, (err) => {\r\n                _d.reject(err);\r\n            })\r\n        }, (err) => {\r\n            _d.reject(err);\r\n        })\r\n        return _d.promise();\r\n    }\r\n\r\n\r\n\r\n    class SchoolsMain extends React.Component{\r\n        render (){\r\n            var data = this.props.data;\r\n            var selectedStateSchools = data.selectedStateSchools || [];\r\n            console.log(selectedStateSchools);\r\n            return (\r\n                <div>\r\n                    <StateBanner />\r\n                    <StateSelector states={data.states} selectedState={data.selectedState} />\r\n                    <SchoolList schools={selectedStateSchools} />\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    var render = () => {\r\n        ReactDOM.render(<SchoolsMain data={appData} />, document.getElementById('schoolMainContainer'));\r\n    };\r\n\r\n    fetchStates.done((data) => { appData.states = data; render(); });\r\n    fetchLocation.then((location) => { appData.location = location; });\r\n\r\n\r\n\r\n\r\n    var Router = Backbone.Router.extend({\r\n        appData,\r\n        routes :{\r\n            'r-schools(/)': 'home',\r\n            'r-schools/:state(/)': 'state',\r\n            'r-schools/:state/:school-:id(/)': 'school'\r\n        },\r\n        home: () => {\r\n            fetchLocalRegion.then((region) => {\r\n                //Fetch user's location information and navigate to the local\r\n                //state (or default state, if local state isn't available or\r\n                //isn't a US state)\r\n                schoolRouter.navigate(`/r-schools/${region.slug}`);\r\n            }, () => {\r\n                //TODO: handle case where somehow the location can't be retrieved\r\n            });\r\n            render();\r\n        },\r\n        state: (stateSlug) => {\r\n            findState(stateSlug).done((foundState) => {\r\n                appData.selectedState = foundState;\r\n                fetchSchoolsForState(stateSlug).then( (data) => {\r\n                    appData.selectedStateSchools = data;\r\n                    render();\r\n                })\r\n                render();\r\n            });\r\n            render();\r\n        },\r\n        school: (stateName, schoolName, schoolID) => {\r\n            console.log(stateName, schoolName, schoolID);\r\n            render();\r\n        }\r\n    });\r\n\r\n    schoolRouter = new Router();\r\n    Backbone.history.start({\r\n        pushState: true\r\n    });\r\n\r\n    return schoolRouter;\r\n});\r\n"]}